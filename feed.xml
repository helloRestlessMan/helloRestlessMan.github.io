<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-11T22:01:03+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">不安分的猿人</title><subtitle>helloRestlessMan的个人博客</subtitle><author><name>helloRestlessMan</name></author><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2019/10/11/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-10-11T21:37:42+08:00</published><updated>2019-10-11T21:37:42+08:00</updated><id>http://localhost:4000/jekyll/update/2019/10/11/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/10/11/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>helloRestlessMan</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Fiddler抓取数据，20行代码赚500块</title><link href="http://localhost:4000/vue/2018/09/07/fiddler%E6%8A%93%E5%8F%96%E6%95%B0%E6%8D%AE-20%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%B5%9A300%E5%9D%97.html" rel="alternate" type="text/html" title="Fiddler抓取数据，20行代码赚500块" /><published>2018-09-07T17:25:00+08:00</published><updated>2018-09-07T17:25:00+08:00</updated><id>http://localhost:4000/vue/2018/09/07/fiddler%E6%8A%93%E5%8F%96%E6%95%B0%E6%8D%AE,20%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%B5%9A300%E5%9D%97</id><content type="html" xml:base="http://localhost:4000/vue/2018/09/07/fiddler%E6%8A%93%E5%8F%96%E6%95%B0%E6%8D%AE-20%E8%A1%8C%E4%BB%A3%E7%A0%81%E8%B5%9A300%E5%9D%97.html">&lt;p&gt;Fiddler抓取数据，20行代码赚500块&lt;/p&gt;

&lt;p&gt;最近接到一个小单子，这位朋友是看到我在CSDN写过一遍“Fiddler抓取微信公众号数据”的博客， 他也想抓取公众号的数据。那篇博客主要为了帮我媳妇抓取公众用户数据（姓名，联系方式，地址）。有兴趣的朋友可阅读一下。我利用空闲时间帮助这位朋友完成了他需要的功能。最终20行代码赚了500块。&lt;/p&gt;

&lt;p&gt;Fiddler抓取微信公众号数据文章地址：&lt;a href=&quot;https://blog.csdn.net/huaairen/article/details/79243760&quot;&gt;https://blog.csdn.net/huaairen/article/details/79243760&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;fiddler工具简介&quot;&gt;Fiddler工具简介&lt;/h2&gt;

&lt;p&gt;Fiddler是一个用于HTTP调试的代理服务器应用程序。Fiddler能捕获HTTP和HTTPS流量，并将其记录下来供用户查看。它通过使用自签名证书实现中间人攻击来进行日志记录。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img1.yantuz.cn/upload/2019/06/5d0506e3caf05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;需求描述&quot;&gt;需求描述&lt;/h2&gt;

&lt;p&gt;抓取公众号访问请求连接，并显示用户信息，将抓取到的信息记录到文本文件。要支持PC端和手机端的抓取请求数据。&lt;/p&gt;

&lt;h2 id=&quot;实现步骤&quot;&gt;实现步骤&lt;/h2&gt;

&lt;h4 id=&quot;1安装配置fiddler&quot;&gt;1.安装配置Fiddler&lt;/h4&gt;

&lt;p&gt;下载地址：https://pan.baidu.com/s/1XuOLUTvRaM_YtMW9t4FlfQ 提取码: wxgk&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装Fiddler_5.0.20173.49666_Setup.exe，很简单，打开效果如下图：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180202223944047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhYWlyZW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;生成证书文件FiddlerRoot.cer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; 在菜单栏中依次选择 【Tools】-&amp;gt;【Options】-&amp;gt;【HTTPS】，勾上如下图的选项&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180202224339587?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhYWlyZW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; 然后点击【Actions】选择导出证书到桌面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180202224501713?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhYWlyZW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注：若导出整数失败，下载证书生成工具fiddlercertmaker.exe即可。&lt;/p&gt;

&lt;p&gt;下载链接：https://pan.baidu.com/s/1VJmm8bAqKaxfetEQBlXT9Q  提取码：8ouz&lt;/p&gt;

&lt;h3 id=&quot;2编写fiddler代码&quot;&gt;2.编写Fiddler代码&lt;/h3&gt;

&lt;p&gt;在Fiddler主界面，选择菜单【rules 】— &amp;gt;【customs rules】选项，然后重启一下进入到如图所示的界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180202230047407?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhYWlyZW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在OnBeforeResponse方法中添加如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(oSession.url.Contains(&quot;lhloyalty.otype.com/?&quot;))
		{
			oSession.utilDecodeResponse();
			var fso;
			var file;
			fso=new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);

			file=fso.OpenTextFile(&quot;d:\\Response.txt&quot;,8,true,true);
			if(oSession.url.IndexOf('&amp;amp;timestamp') &amp;gt; -1){
				file.writeLine(&quot;https://&quot; + oSession.url.Substring(0,oSession.url.IndexOf('&amp;amp;timestamp')));
			}
			if(oSession.url.IndexOf('getUserPointList') &amp;gt; -1){
				var result = oSession.GetResponseBodyAsString();
				var startIndex = result.indexOf('userName');
				var lastIndex = result.indexOf('userPoint');
				var hanzi = result.substring(startIndex+11, lastIndex -3);
				file.writeLine(&quot;用户名称: &quot; + unescape(hanzi.replace(/\\/g, &quot;%&quot;)));
				file.writeLine(&quot;==========================================================================================================&quot;);
	
			}
			file.close();
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3实现手机远程访问&quot;&gt;3.实现手机远程访问&lt;/h3&gt;

&lt;p&gt;Fiddler对app进行抓包的配置可参考下面这篇文章，我这里就不啰嗦了！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/4dc40848617b1dc8d846f16d.html?from=singlemessage&amp;amp;isappinstalled=0&quot;&gt;https://jingyan.baidu.com/article/4dc40848617b1dc8d846f16d.html?from=singlemessage&amp;amp;isappinstalled=0&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4结果展示&quot;&gt;4.结果展示&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;![](https://img1.yantuz.cn/upload/2019/06/5d050fbd0dc36.png)&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;前段时间通过朋友的介绍我终于开窍了，趁着“年轻”多交一些智商税！我加入了很多付费圈子，听到一个很好的观点“复利”。商业中这个观点体现的淋漓尽致，花一份时间完成的产品，可以卖给千百万个用户，这就实现了复利。我写文章亦是如此，记录总结日常点滴。如果有朋友遇到类似的情况，就可以直接参考了。如果这篇文章帮助到更多的朋友，那么这篇文章就产生了更大的价值，这就是复利。每一个人的时间都是有限的，俗话说8小时内求生存，8小时外求发展；有效的利用自己的时间，让你的时间产生复利效应，你距离实现财务自由也就不远了!&lt;/p&gt;</content><author><name>不安分的猿人</name></author><category term="Fiddler" /><category term="Java" /><summary type="html">Fiddler抓取数据，20行代码赚500块</summary></entry><entry><title type="html">Vue + SpringCloud之后端实战经验分享</title><link href="http://localhost:4000/vue/2018/09/07/3%E4%B8%AA%E6%9C%88SpringBoot%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB.html" rel="alternate" type="text/html" title="Vue + SpringCloud之后端实战经验分享" /><published>2018-09-07T17:25:00+08:00</published><updated>2018-09-07T17:25:00+08:00</updated><id>http://localhost:4000/vue/2018/09/07/3%E4%B8%AA%E6%9C%88SpringBoot%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB</id><content type="html" xml:base="http://localhost:4000/vue/2018/09/07/3%E4%B8%AA%E6%9C%88SpringBoot%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB.html">&lt;p&gt;Vue + SpringCloud之后端实战经验分享&lt;/p&gt;

&lt;h2 id=&quot;1前后端分离&quot;&gt;1.前后端分离&lt;/h2&gt;

&lt;p&gt;去年项目组的项目是SpringMVC+Dwz实现的，由于业务增加，这样的一个springMVC项目已经很臃肿，一处出现问题，就导致服务崩溃，太不灵活。今年年初，为了适应公司业务的发展，公司高层决定项目重构，采用前后端分离。今天先分享后端的开发。&lt;/p&gt;

&lt;p&gt;前后端的好处显而易见：&lt;/p&gt;

&lt;p&gt;1.前端JS可以做很大部分的数据处理工作，对服务器的压力减小到最小。&lt;/p&gt;

&lt;p&gt;2.后台错误不会直接反映到前台，错误接秒较为友好。&lt;/p&gt;

&lt;p&gt;3.前后台各尽其职可以最大程度的减少开发难度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/HTB1bAxsa1T2gK0jSZFvq6xnFXXaJ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2技术栈&quot;&gt;2.技术栈&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;SpringBoot :是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。&lt;/li&gt;
  &lt;li&gt;SpringCloud：是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。&lt;/li&gt;
  &lt;li&gt;Docker：是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。&lt;/li&gt;
  &lt;li&gt;Jenkins：一种比较流行的持续集成工具。持续集成是使多种软件的功能集成到一个软件里，或是把软件的各部分组合在一起。&lt;/li&gt;
  &lt;li&gt;RabbitMQ：是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，或者简单的将作业排队以便让分布式服务器进行处理。&lt;/li&gt;
  &lt;li&gt;Redis是完全开源免费的，是一个开源的高性能的key-value数据库。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3后端项目总结&quot;&gt;3.后端项目总结&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;项目微服务四个基础服务,其他就是业务服务。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​               Eurake： 主要职责服务的注册和发现。&lt;/p&gt;

&lt;p&gt;​               Admin： 负责用户认证，生成用户token。&lt;/p&gt;

&lt;p&gt;​               System： 系统基础数据服务。&lt;/p&gt;

&lt;p&gt;​               Zuul： 网管服务。&lt;/p&gt;

&lt;p&gt;​    2. 独立开发的springBoot项目&lt;/p&gt;

&lt;p&gt;​         完成业务功能的同时，项目也内置swagger（一款API文档的框架 ），方便前后台接口调试。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;服务间调用&lt;/p&gt;

    &lt;p&gt;我们采用的Feign进行服务间调用，它只需要创建一个接口，并且使用注解的方式去配置，即可完成对服务提供方的接口绑定，大大简化了代码的开发量 。其他方式也有RestTemplate。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;持续集成工具Jenkins&lt;/p&gt;

    &lt;p&gt;项目组成员提交代码到GitLab，Jenkins检测有代码更新，会自动打包部署。项目实现部署自动化，减少人工成本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分布式事务&lt;/p&gt;

    &lt;p&gt;LCN分布式事务框架的核心功能是对本地事务的协调控制，框架本身并不创建事务，只是对本地事务做协调控制。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SpringBoot项目架构优化&lt;/p&gt;

    &lt;p&gt;由于有些服务需要对外提供多个调用接口，我们小组组长对微服务做了一些改进。将一个springBoot项目拆分为三个模块：entity,server,client。entity是实体，server是业务出来逻辑，client是FeignClient。其他服务需要调用本服务的接口，只需要在pom中引用entity,client。就不需要在自己的微服务中定义实体和FeignClient，使服务间调用解耦。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用RabbitMQ记录日志&lt;/p&gt;

    &lt;p&gt;RabbitMQ是实现 AMQP（高级消息队列协议）的消息中间件的一种，项目中主要使用使用RabbitMQ记录日志。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用Java8新语法&lt;/p&gt;

    &lt;p&gt;在springBoot项目开发中使用了一些Java8的新语法，lambda表达式，Steam,Optional,方法引用,日期的处理等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;遇到的坑&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​       1.服务间调用无法调用&lt;/p&gt;

&lt;p&gt;​        当我们需要调试某个微服务的时候，将我们这个微服务注册到开发测试环境的eurake服务上，但是经常是自动访问不到我们注册的服务。解决方法在FeignClient注解添加url属性，指定服务地址。例如：@FeignClient(name = “test-client”, url = “https://api.github.com”)&lt;/p&gt;

&lt;p&gt;​       2.FeiginClient实现文件上传功能&lt;/p&gt;

&lt;p&gt;​        服务提供方的请求需添加consumes 参数， @PostMapping(value = “/uploadFile”, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)，服务的消费方在FeignClient需要添加SpringFormEncoder编码器。添加如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Configuration
    class MultipartSupportConfig {
        @Bean
        public Encoder feignFormEncoder() {
            return new SpringFormEncoder();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​         3.指定数据库方言&lt;/p&gt;

&lt;p&gt;​          如果不指定数据库方言 ，使用Mybitas Plus自动生成分页查询语句可能回出现问题。&lt;/p&gt;

&lt;p&gt;​        4.日期类型时间相差8小时&lt;/p&gt;

&lt;p&gt;​           原因是前台传递的是UTC 时间，UTC + 时区差 ＝ 本地时间。所有后台有两种解决方式，使用Java8的LocalDateTime类型，或者使用Date类型，在属性上添加注解@JsonFormat(pattern=”yyyy-MM-dd”,timezone=”GMT+8”)。&lt;/p&gt;

&lt;h2 id=&quot;5结语&quot;&gt;5.结语&lt;/h2&gt;

&lt;p&gt;最开始项目要重构采用新的架构，前端使用时下流行的Vue,后端使用便捷的SpringBoot，我是很兴奋的。我是做Java开发，后端对于我来说是没有什么问题。但是前端就感觉有点吃力了，因为当时决定前后端分离，我们项目还没有一个前端，感觉很虚。&lt;/p&gt;

&lt;p&gt;公司的大力支持，在项目进入开发阶段的前两周，有了三人的前端开发团队，然后我们就进入了疯狂的撸代码阶段。项目组都是年轻人，我们为了一个共同目标，共同奋斗，超越自我。从一开始的不自信，慢慢走向自信。虽然一直加班，但也一直在成长，年轻就该吃点苦头！&lt;/p&gt;

&lt;p&gt;一直很忙碌，没时间总结，今天整理一下，文中主要是我个人的一些经历和思考。前后端分离项目中遇到了很多坑，你在项目开发中遇到过那些坑，我们可以一起讨论。&lt;/p&gt;</content><author><name>不安分的猿人</name></author><category term="SpringCloud" /><category term="Vue" /><summary type="html">Vue + SpringCloud之后端实战经验分享</summary></entry><entry><title type="html">5分钟搭建Java博客系统</title><link href="http://localhost:4000/vue/2018/09/07/5%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html" rel="alternate" type="text/html" title="5分钟搭建Java博客系统" /><published>2018-09-07T17:25:00+08:00</published><updated>2018-09-07T17:25:00+08:00</updated><id>http://localhost:4000/vue/2018/09/07/5%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2</id><content type="html" xml:base="http://localhost:4000/vue/2018/09/07/5%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html">&lt;p&gt;5分钟搭建Java博客系统&lt;/p&gt;

&lt;h2 id=&quot;为什么是-blade-&quot;&gt;为什么是 Blade ?&lt;/h2&gt;

&lt;p&gt;Blade是无意间起的一个名字，始于 2015 年 9 月，目的为个人开发者提供一个除 Spring 系列框架的一个选择。&lt;/p&gt;

&lt;p&gt;学习 Blade 搭建 Web 程序，只需要 1 小时，如果你是一个Web开发的老手，也许&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;分钟就够了。&lt;/p&gt;

&lt;h2 id=&quot;blade-是什么&quot;&gt;Blade 是什么?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;一个高效的 MVC 开发框架&lt;/li&gt;
  &lt;li&gt;是一个自带WebServer的库&lt;/li&gt;
  &lt;li&gt;帮助开发者快速构建Web程序&lt;/li&gt;
  &lt;li&gt;源代码不到 &lt;code class=&quot;highlighter-rouge&quot;&gt;500KB&lt;/code&gt; 的开源框架&lt;/li&gt;
  &lt;li&gt;简洁优雅的 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;总的来说 Blade 是一款帮助你快速搭建一个 Web 应用程序的开源框架，它的代码简洁，风格优雅，API用起来还不错。 如果你愿意阅读它的代码，也花不了你多长时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么问题来了，&lt;strong&gt;Blade 不是什么？&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不是 J2EE 体系下的产物（也就是没有遵循Servlet规范）&lt;/li&gt;
  &lt;li&gt;不是全家桶（它负责了Web的周边，但更多扩展功能需要自行实现）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;架构图&quot;&gt;架构图&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://lets-blade.com/static/images/architecture.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们只需要关注两点，路由和模板。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;路由&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Blade路由把每一个请求递交给对应的方法来执行，这是通过把程序中的配置好的路由路径，来与请求中的URL进行匹配来实现的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模板&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Blade内置了简单的Html模板，但一般不足以应付灵活的Web开发，笔者一般使用 &lt;a href=&quot;https://github.com/subchen/jetbrick-template-2x&quot;&gt;jetbrick-template&lt;/a&gt; 这款模板引擎作为支持。 当然你可以扩展其他你喜欢的模板引擎。&lt;/p&gt;

&lt;h2 id=&quot;实战操作&quot;&gt;实战操作&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;准备工作&lt;/p&gt;

    &lt;p&gt;1.确保本地已安装Java8开发环境；&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5d4c3fe9451253d17801138c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;2.确保本地已安装maven工具；&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5d4c3fe9451253d17801138e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载项目&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/otale/tale.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行项目&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;IDE里面运行&lt;/p&gt;

        &lt;p&gt;a.将项目导入到IDE中，这里我使用的是Idea&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://pic3.superbed.cn/item/5d4c4136451253d178011e5e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;b.找到 com.tale.Application类，直接运行&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5d4c4240451253d178012472.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;c.运行成功如下图&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5d4c4240451253d178012476.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;2.命令行运行项目&lt;/p&gt;

    &lt;p&gt;a.切换到项目源码路径,编译源码&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean package -Pprod -Dmaven.test.skip=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;编译成功如下图：
&lt;img src=&quot;https://ae01.alicdn.com/kf/H43fd1ae8a5c6425cae89b125736d9cec6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;b.切换路径到 tale\target\dist\&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic3.superbed.cn/item/5d4c3fd0451253d178011289.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;c.解压 tale.zip 压缩文件&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H6c20314a208041de9931ede998e621fcr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;d.运行 tale-latest.jar&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar  tale-latest.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;启动成功如下图：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H636b04d1a2484a778b0de24c870b611fx.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;3.在Idea的Terminal窗口执行打包命令&lt;/p&gt;

    &lt;p&gt;Idea的Terminal窗口与cmd窗口的功能是相同的。可以执行&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean package -Pprod -Dmaven.test.skip=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;对源码进行打包，然后也可以在命令行启动项目。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;项目启动成功&lt;/p&gt;

    &lt;p&gt;1.首次登录，需要填写配置信息&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5d4c4240451253d17801247e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;2.登录后台管理系统&lt;/p&gt;

    &lt;p&gt;后台系统链接：&lt;a href=&quot;http://127.0.0.1:9000/admin/login&quot;&gt;http://127.0.0.1:9000/admin/login&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;输入管理员账号和密码即可登录&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5d4c4240451253d178012481.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;后台管理页面&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic1.superbed.cn/item/5d4c42a2451253d178012700.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;3.博客前台页面&lt;/p&gt;

    &lt;p&gt;博客前台链接：&lt;a href=&quot;http://127.0.0.1:9000/&quot;&gt;http://127.0.0.1:9000/&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://pic1.superbed.cn/item/5d4c42a2451253d178012702.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>不安分的猿人</name></author><category term="blog" /><category term="Spring" /><summary type="html">5分钟搭建Java博客系统</summary></entry></feed>